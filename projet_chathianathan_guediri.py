# -*- coding: utf-8 -*-
"""Projet_CHATHIANATHAN_GUEDIRI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VLcXHy1TFa-ygRboDLIjtb2B8ML9dLFv

# **Présentation du projet**

Notre sujet repose sur le classement des équipes de football de l'année 2020-2021, elle comprend les cinq  championnats principaux : English Premier League, French Ligue 1, German Bundesliga, Italian Seria A et Spanish La Liga. 

Pour réaliser des test statistique, nous  avons sélectionné un dataset de footbnall sur Kaggle : https://www.kaggle.com/varpit94/football-teams-rankings-stats

Le dataset comprend 98 lignes et plusieurs colonnes dont :     


Team - Nom de l'équipe
Tournament - Nom du championnat
Goals - Nombre de buts marqués dans le tournoi en 2020-2021
Shots pg - Nombre de tirs par match
Yellow_cards - Nombre de cartons jaunes donnés dans le tournoi en 2020-2021
Red_cards - Nombre de cartons rouges donnés dans le tournoi en 2020-2021
Possession% - Pourcentage de possession de balle.
Pass% - Pourcentage de passes
Aerials won - Duels aériens gagnés par match. 
Rating - Classement général de l'équipe

Dans un premier temps nous allons nettoyer les donnés afin de se débarrasser  des données que nous allons pas utiliser, puis aborder deux problématiques pour lesquelle nous répondrons à partir de différents tests.

Problématique 1 :  Existe-il un lien entre le nombre de buts marqués et tous les autres paramètres ? 

Problématique 2 : Le pourcentage de passe réussi  a t-elle une influence sur le pourcentage de possession de balles ?

#  **Nettoyage de donnnées**

---
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

!ls MyDrive/ProjetEstimation/

# Commented out IPython magic to ensure Python compatibility.
# %load_ext rpy2.ipython

#Import de la librairie panda
import pandas

# Commented out IPython magic to ensure Python compatibility.
# #Importer des librairies 
# %%R
# library(ggplot2)
# library(dplyr)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# dataset <- read.csv(file = 'MyDrive/ProjetEstimation/Football teams.csv')

# Commented out IPython magic to ensure Python compatibility.
# #Nom des colonnes
# %%R
# colnames(dataset)

# Commented out IPython magic to ensure Python compatibility.
# #Affichage des données du dataset
# %%R
# print(dataset)

# Commented out IPython magic to ensure Python compatibility.
# #Copie du dataset en un data.frame
# %%R
# df <- data.frame(dataset)

# Commented out IPython magic to ensure Python compatibility.
# #Ici on retire les colonnes qui nous intéressent pas, c'est-à-dire, 'yellow_cards, red_cards, AerialsWon'
# %%R
# df <- subset( df, select = -c(yellow_cards, red_cards, AerialsWon))

# Commented out IPython magic to ensure Python compatibility.
# #Affichage du data.frame df
# %%R
# df

"""# **Observation globale**

---



1.   Tableau d'effectif
2.   Tableau de contingence
3.   Tableau de proportions

Nous allons faire une observation globale avant de faire une analyse approfondi.
"""

# Commented out IPython magic to ensure Python compatibility.
# #Observation globale
# %%R
# summary(df)

# Commented out IPython magic to ensure Python compatibility.
# # 1.Tableau d'effectif, nombre d'équipes par championnats
# %%R
# eff <-table(df$Tournament)
# eff

# Commented out IPython magic to ensure Python compatibility.
# # 2.Tableau de contingence, savoir dans quel championnat évolue uneéquipe
# %%R
# cont<-table(df$Tournament,df$Team)
# cont

"""Ce tableau nous permet de savoir dans quel championnat évolue chaque équipe (1 si l'équipe évolue dans le championnat et 0 si non)."""

# Commented out IPython magic to ensure Python compatibility.
# #3.Tableau de proportions
# %%R
# prop <- prop.table(table(df$Tournament,df$Team))
# prop

"""Ce tableau nous indique la proportion de chaque équipe (0.1020408) ainsi que dans quel championnat, elle évolue. La somme de toutes les proportions donnent 1, ce qui est cohérent, car une équipe ne peut appartenir qu'à un seul championnat.

# *Analyse entre le nombre de buts marqués et les autres paramètres (variables)*

---
##Problématique : Existe-il un lien entre le nombre de buts marqués et tous les autres paramètres ? 

###      **Analyse préliminaire**


1.   Moyenne de buts de toutes les équipes tout championnat confondus
2.   Écart-type de buts de toutes les équipes tout championnat confondus
3.   Médiane de buts de toutes les équipes tout championnat confondus
4.   Évaluation de la densité

###      **Différents types de visualisations**


1.   Histogramme
2.   Diagramme en barre
3.   Intervalle de confiance


###     **Analyse appronfondie**




Dans un premier temps, nous ferons plusieurs analyses pour appuyer notre propos.

1.   Les 5 meilleurs équipes en terme de buts marqués
2.   Les 5 pires équipes en termes de buts marqués



> **Remarque**


3.   Moyenne des 5 meilleures équipes en terme de buts marqués
4.   Moyenne des 5 pires équipes en terme de buts marqués


> **Remarque**

5.  Nuage de points
6.  Droite de regression
###   **Conclusion**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 1.Moyenne de buts de toutes les équipes tout championnat confondu
# %%R
# moy <-sapply(df,mean)
# print(moy["Goals"])
# 
#

"""La moyenne de buts est de 52,18 pour toutes les équipes de tous les championnats confondus."""

# Commented out IPython magic to ensure Python compatibility.
# # 2.Écart-type de buts de toutes les équipes tout championnat confondu
# %%R
# sd <- sapply(df,sd)
# print(sd["Goals"])
#

"""L'écart-type de buts de toutes les équipes est d'environ 16,5. 
En moyenne, le nombre de buts de toutes les équipes tout championnat confondus présente un écart d'environ 16.5 buts par rapport à la moyenne.

"""

# Commented out IPython magic to ensure Python compatibility.
# # 3.Médiane de buts de toutes les équipes tout championnat confondu
# %%R
# med <- sapply(df,median)
# print(med["Goals"])
#

"""On constate que 50% des équipes marquent soit 50 buts ou moins, soit marquent 50 buts ou plus."""

# Commented out IPython magic to ensure Python compatibility.
# # 4.Diagramme de densité
# %%R
# library(ggplot2)
# density <- ggplot(df, aes(x = df$Goals))
# 
# density + geom_density (fill = "red") + geom_vline(aes(xintercept = mean(df$Goals)), linetype = "dashed") +labs(title="Courbe de la densité",x="Buts marqués", y = "Density")
# 
#

"""Cette courbe nous permet d'observer que le pic de densité est atteint à un certain seuil qui s'apparente à la valeur 52-53. Nous avons précédemment calculé la moyenne de buts de toutes les équipes, et avons eu une moyenne de 52,18. Par conséquent, on peut en déduire que le pic de densité correspond à la moyenne de buts de toutes les équipes.

**Nous allons illustrer nos données sous différents types de visualisations pour mieux répondre à notre problématique.**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 1.Histogramme du nombre de buts
# %%R
# hist(df$Goals,col="red",breaks=50,main="Histogramme du nombre de  buts",xlab="Buts marqués",ylab="Nombre d'équipes")

"""Cet histogramme nous permet de visualiser le nombre de buts marqués par toutes les équipes tout championnat confondus.

Exemple :
 
--> Une seule équipe marque plus de 99 ou 100 buts , c'est le cas du Bayern Munich

--> Une seule équipe marque moins de 20 ou 19 buts , c'est le cas de Sheffield United
"""

# Commented out IPython magic to ensure Python compatibility.
# %%R
# d <- df %>% top_n(5, Goals)
# d

# Commented out IPython magic to ensure Python compatibility.
# # 2.Diagramme en barre des cinq meilleures équipes en termes de buts marqués
# 
# %%R
# 
# Bar<- ggplot(d,  aes(x=Team, y=Goals))
# Bar + geom_bar(stat="identity",aes(fill=Team),colour="Black") + 
#   theme( axis.title.x =element_text(colour = 'Black',size=15),
#         axis.title.y =element_text(colour = 'Black',size=15),
#         axis.text.x = element_text(colour='red', size=9),
#         axis.text.y = element_text(colour='red', size=9))
# 
# 
#

"""Ce diagramme en  barre nous affiche le nombre de buts des cinq meilleures équipes. Cela concorde avec les données trouvées précédemment.

3. **Zoom sur les intervalles de confiances**

    3.1   sur une moyenne

    3.2   sur une proportion
"""

# Commented out IPython magic to ensure Python compatibility.
# # 3.1.Intervalle de confiance sur une moyenne
# %%R
# t.test(df$Goals, conf.level = 0.95)

"""Notre intervalle de confiance est [0,49; 0,55] au seuil de confiance de 0,95. On peut ainsi dire, que la proportion de buts est concentrée dans l'intervalle [0,49; 0,55] au seuil de confiance de 0,95. """

# Commented out IPython magic to ensure Python compatibility.
# # 3.2.Intervalle de confiance sur une proportion
# %%R
# prop.test(df$Shots.pg,df$Goals)

"""**Nous allons à présent zoomer sur le nombre de buts marqués et sur les meilleures performances des 5 meilleures et pires équipes.**



"""

# Commented out IPython magic to ensure Python compatibility.
# #Création d'une variable qui stocke le data.frame df
# %%R
# SortByGoals = data.frame(df)

# Commented out IPython magic to ensure Python compatibility.
# #Fonction de tri par ordre décroissant de buts marqués
# %%R
# SortByGoals <- SortByGoals[order(SortByGoals$Goals, decreasing = TRUE),]

# Commented out IPython magic to ensure Python compatibility.
# # 1.Les cinq meilleures équipes en terme de buts marqués
# %%R
# Bestof5 <- head(SortByGoals,5)
# Bestof5

# Commented out IPython magic to ensure Python compatibility.
# # 2.Les cinq pires équipes en termes de buts marqués
# %%R
# Worstof5 <- tail(SortByGoals,5)
# Worstof5

"""**REMARQUE : Nous avons ici réalisé une analyse sur les 5 meilleurs et pires équipes suivant un critère spécifique : le nombre de buts marqués. On constate une différence entre plusieurs paramètres qui sont : le nombre de tir par match, le pourcentage de possession de balle, la moyenne générale de l'équipe, mais aussi un pourcentage de passe plus réussis.**

**Les autres paramètres cités précédemment sont plus élevés lorsqu'on zoome sur la population avec le plus de buts marqués.**

**Faisons un zoom sur les moyennes des deux populations pour discuter des résultats**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 3.Moyenne des 5 meilleurs équipes en terme de buts marqués
# %%R
# moy <-sapply(Bestof5,mean)
# print(moy["Goals"])

# Commented out IPython magic to ensure Python compatibility.
# # 4.Moyenne des 5 pires équipes en terme de buts marqués
# %%R
# moy <-sapply(Worstof5,mean)
# print(moy["Goals"])

"""**REMARQUE : Il y a une nette différence de buts entre les 5 meilleurs et 5 pires équipes. En effet, lorsque nous observons les moyennes de ces deux populations, on remarque que les meilleures équipes ont une moyenne de buts de 90, tandis que les pires équipes ont une moyenne de buts de 24,6.**

**On va se poser la question suivante : Existe-il une corrélation entre le paramètre 'buts marqués' et les autres paramètres ?**

**Pour cela, on va réaliser un nuage de point et analyser sa droite de régression.**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 5.Nuage de point --> Paramètre pris en compte : Buts marqués et Tir par match
# %%R
# plot(df$Goals,df$Shots.pg, main = "Nuage de point", las=1,xlab="Goals", ylab="Tir par match")
# 
#

"""L'allure du nuage de points révèle l'existe d'une liaison les deux variables quantitatives (ici buts et nombre de tir). Les variables sont dépendantes l'une de l'autre : elles sont en corrélation. La corrélation est ici positive quand le nombre de tir par match augmente alors le nombre de buts aussi.

"""

# Commented out IPython magic to ensure Python compatibility.
# # 6.Droite de regreession
# %%R
# ggplot(df, aes(x = df$Goals,y=df$Shots.pg)) + geom_point(color='red') +  geom_smooth(method = "lm", se = FALSE)
#

"""**Le nuage de points montre bien que les valeurs de notre axe x dépendent des valeurs de l'axe y. On constate une certaine concentration des points dans une zone.**

**La tendance des points du nuage montre une relation linéaire positive avec une légère dispersion pour quelques données et une présence de valeurs extrêmes.**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%R
# MatriceCor <- cor(df$Goals, df$Shots.pg, method = c("pearson"))
# MatriceCor

"""**On déduit que les deux paramètres testés, ici 'Buts marqués' et 'Pourcentage de tir par match' ont un degré de corrélation assez important. Il s'agit d'un accroissement simultané des deux paramètres,car l'axe x (Buts marqués) et l'axe y (Pourcentage de tir par match) évoluent dans le même sens.**

On peut tester la corrélation entre le paramètre 'Buts marqué' et 'Pourcentage de passe'
"""

# Commented out IPython magic to ensure Python compatibility.
# # 5.Nuage de point --> Paramètre pris en compte : Buts marqués et Pourcentage de Possessions de balle
# %%R
# plot(df$Goals,df$Possession, main = "Nuage de point", las=1,xlab="Goals", ylab="% de Possession de balle")
# 
#

# Commented out IPython magic to ensure Python compatibility.
# # 6.Droite de regression
# %%R
# ggplot(df, aes(x = df$Goals,y=df$Possession)) + geom_point(color='red') +  geom_smooth(method = "lm", se = FALSE)
#

# Commented out IPython magic to ensure Python compatibility.
# %%R
# MatriceCor <- cor(df$Goals, df$Possession., method = c("pearson"))
# MatriceCor

"""**Même observation qu'auparavant, les nuages de points font apparaître une relation affine forte et positive entre les paramètres 'Buts marqués' et 'Pourcentage de Possessions de balle'.**"""

# Commented out IPython magic to ensure Python compatibility.
# %%R
# MatriceCor <- cor(df$Goals, df$Pass., method = c("pearson"))
# MatriceCor

"""On peut voir que la corrélation entre les paramètres 'Buts marqués' et 'Pourcentage de passe'  avoisine les 70%.

**CONCLUSION : Lorsque une équipe marque plus de buts, les autres paramètres cités précédemment vont être également plus élevé qu'une équipe qui marque moins de buts. Grace aux nuages de points réalisés, nous avons observé une certaine corrélation entre le nombre de but marqué et la possession de balle, mais aussi le nombre de tirs par match. Pour répondre à la problématique, il existe bel et bien un lien entre le nombre de buts marqués et les autres paramètres (variables).On peut le voir avec les différentes corrélations examinés**.

# *Analyse sur l'influence entre le pourcentage de possession de balles et le pourcentage de passe réussis et inversement)*

---
##Problématique : Le pourcentage de passe réussis a t-elle une influence sur le pourcentage de possession de balles ?




###      **Analyse préliminaire**

0.   Analyse sur les moyennes des deux populations en terme de pourcentage de passe réalisés
  
  0.a Shapiro-test

  0.b Test de l'égalité des variances

  0.c Test de Welch

###      **Différents types de visualisations**

1.   Diagramme Circulaire

> Remarque

###      **Analyse appronfondi**


2. Nuage de points
3. Droite de regréssion
4. Analyse du résidus



###     **Conclusion**

Dans un premier temps, nous allons examiner la moyenne des deux populations, le poucentage des cinqs meilleurs équipes en terme de possession et les cinqs pires équipes en terme de possession.
"""

# Commented out IPython magic to ensure Python compatibility.
# # Affectation
# %%R
# SortByPercentageOfPass = data.frame(df)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# SortByPercentageOfPass <- SortByPercentageOfPass[order(SortByPercentageOfPass$Possession., decreasing = TRUE),]
#

# Commented out IPython magic to ensure Python compatibility.
# #Analyse sur les 5 meilleires équipes en terme de pourcentage de passes réalisés 
# %%R
# Bestof5Pass <- head(SortByPercentageOfPass,5)
# Bestof5Pass

# Commented out IPython magic to ensure Python compatibility.
# #Analyse sur les 5 pires équipes en terme de pourcentage de passes réalisés 
# %%R
# Worstof5Pass <- tail(SortByPercentageOfPass,5)
# Worstof5Pass

"""**Réalisation du shapiro.test pour savoir si notre série de données suit une loi normale.**"""

# Commented out IPython magic to ensure Python compatibility.
# # 0.a.Shapiro test
# %%R
# shapiro.test(df$Possession.)

"""**On peut voir ici qu’en appliquant la loi de Shapiro,la p-value est supérieur à alpha (0.05).Par conséquent, elle renvoie une p-value non significative. L'échantillon peut suivre une loi normale.**

**On va maintenant tester l'égalité des variances**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 0.b. Test de l'égalité des variances
# %%R
# varPo <- var(df$Possession.)
# varPo

# Commented out IPython magic to ensure Python compatibility.
# %%R
# varPa <-var(df$Pass.)
# varPa

"""Les variances ne sont pas égales, on va donc faire le test de Welch."""

# Commented out IPython magic to ensure Python compatibility.
# %%R
# df2 <- data.frame(dataset)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# df2 <- Filter(is.numeric, dataset)
#

# Commented out IPython magic to ensure Python compatibility.
# %%R
# df2 <- subset( df2, select = -c(yellow_cards, red_cards, AerialsWon,Pass.,Rating,Goals,Shots.pg))
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%R
# SortByPercentageOfPossession <- df2[order(SortByPercentageOfPass$Possession., decreasing = TRUE),]
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%R
# BestPossession <- head(SortByPercentageOfPossession,5)
# BestPossession

# Commented out IPython magic to ensure Python compatibility.
# %%R
# WorstPossession <- tail(SortByPercentageOfPossession,5)
# WorstPossession

# Commented out IPython magic to ensure Python compatibility.
# # 0.c.Test de Welch 
# %%R
# t.test(BestPossession, WorstPossession)

"""On constate que la moyenne des deux populations est assez différente. En effet, les meilleures cinq équipes équipes ont une possession de 60,20, et les cinq pires équipes ont une possession de 41,34, ce qui est assez faible. """

# Commented out IPython magic to ensure Python compatibility.
# # 1.Diagramme circulaire sur les 5 meilleurs équipes en termes de buts marqués
# %%R
# d <- df %>% top_n(5, Goals)
# d
#

"""On affecte à la fonction d les 5 meilleurs équipes en termes de buts marqués."""

# Commented out IPython magic to ensure Python compatibility.
# # 1.a. Diagramme circulaire
# %%R
# ggplot(data = d, aes(x = Possession., y = Team, fill = Possession.)) + geom_bar(stat = "identity") +  coord_polar("y")

"""**Ce diagramme circulaire nous affiche le pourcentage de passes des cinq meilleures équipes. On constate que le Paris-Saint-Germain est l'équipe avec le plus de possession de balles, mais aussi qui a le pourcentage de passe le plus réussi. On peut donc émettre l'hypothèse que le pourcentage de passe réussi influe sur le pourcentage de possessions de balles.**

**REMARQUE : Les équipes qui ont un score élevé en pourcentage de possession font beaucoup plus circuler la balle.**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 3.Nuage de point --> Paramètre pris en compte : Pourcentage en possession de balle et pourcentage de passes réussis.
# %%R
# plot(df$Possession.,df$Pass., main = "Nuage de point", las=1,xlab="%Possession", ylab="%Passes réussis")
# 
#

# Commented out IPython magic to ensure Python compatibility.
# # 4.Droite de regression
# %%R
# ggplot(df, aes(x = df$Possession.,y=df$Pass.)) + geom_point(color='red') +  geom_smooth(method = "lm", se = FALSE)
#

"""Le nuage de points observé s'apparente à une droite croissante et révèle l'existence d'une liaison entre nos deux paramètres.
Le pourcentage de passes réussis et la possession de balle semblent entre dépendante l'une de l'autre. Notre hypothèse se confirme, il existe une forte corrélation entre nos deux paramètres.


"""

# Commented out IPython magic to ensure Python compatibility.
# %%R
# cor(df$Possession.,df$Pass.)
#

"""Le coefficient de corrélation suit notre raisonnement précèdent. À partir de notre coefficient de corrélation, on peut dire que nos paramètres montre une forte relation linéaire ascendante.

**Analysons à présent les résidus, c'est-à-dire, les valeurs qui sont à l'écart**
"""

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Formule
# %%R
# beta1 <- cov(df$Pass.,df$Possession.)/var(df$Pass.)
# beta0 <- mean(df$Possession.) - beta1*mean(df$Pass.)
# print(beta1)
# print(beta0)

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Modèle
# %%R
# mod1 <- lm(df$Possession.~df$Pass.)
# coef(mod1)

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Valeurs des deux tableaux
# %%R
# str(df$Possession.)
# str(df$Pass.)

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Prédiction des valeurs
# %%R
# fitted.values(mod1)

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Tableau de résidus, des écarts
# %%R
# residuals(mod1)

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Répartition des écarts dans un nuage de points
# 
# %%R
# plot(residuals(mod1))
#

"""On constate des valeurs extrêmes dans ce nuage de point, les points sont globalement présent dans l'intervalle [-2;4]. Cela se justifie par le coefficient de corrélation obtenu : 0,85. Il est donc logique que la majorité des points soient concentrés dans l'intervalle citée précédemment."""

# Commented out IPython magic to ensure Python compatibility.
# # 5.Analyse du résidus --> Application du calcul avec les troisièmes valeurs du tableau df$Possessions. et df$Pass.
# %%R
# beta1*89.5 + beta0

# 5.Analyse du résidus --> Vérification à la main du résulat obtenu par rapport à la troisième valeur du tableau résiduals.

#60.1 VALEUR OBSERVE DANS LE TABLEAU - VALEUR OBTENUS SUITE AU CALCUL
60.1 - 58.03728

"""On retrouve bien l'écart attendu dans le tableau residuals.

**CONCLUSION : Ainsi, nous constatons bel et bien que le pourcentage de passes réussis influe sur le pourcentage de possessions de balles. En effet, les deux paramètres sont liés, on a vu que plus le pourcentage de passes réussis était élevé plus le pourcentage de possession de balles avec l'exemple du Paris-Saint-Germain.**
**
"""

